services:
  frontend:
    image: frontend:dev
    container_name: frontend_dev
    build:
      context: ./frontend
      dockerfile: Dockerfile
    init: true
    volumes:
    - ./frontend:/app
    - /app/node_modules
    ports:
      - "3000:3000"
    restart: always
    networks:
      - frontend
  apigateway:
    image: apigateway:dev
    container_name: apigateway_dev
    init: true
    env_file:
      - .env
    build:
      context: ./apigateway
      dockerfile: Dockerfile 
    ports:
      - "8090:8090"
    volumes:
      - type: bind
        source: ./apigateway
        target: /app 
    environment:
      - SPRING_DEVTOOLS_RESTART_ADDITIONAL_PATHS=/app # Path to watch for changes
    restart: always
    networks:
      - frontend
      - backend
  businessservice:
    env_file:
      - .env
    image: businessservice:dev
    container_name: businessservice_dev
    build:
      context: ./businessservice
      dockerfile: Dockerfile
      target: dev
    init: true
    volumes:
      - type: bind
        source: ./businessservice
        target: /app
      - type: bind
        source: ./businessservice/logs
        target: /app/businessservice-logs
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - backend
  auditprocessservice:
    env_file:
      - .env
    image: auditprocessservice:dev
    container_name: auditprocessservice_dev
    build:
      context: ./auditprocessservice
      dockerfile: Dockerfile
      target: dev
    init: true
    volumes:
      - type: bind
        source: ./auditprocessservice
        target: /app
      - type: bind
        source: ./auditprocessservice/logs
        target: /app/auditprocessservice-logs
    ports:
      - "8081:8081"
    restart: unless-stopped
    networks:
      - backend
  userservice:
    env_file:
      - .env
    image: userservice:dev
    container_name: userservice_dev
    build:
      context: ./userservice
      dockerfile: Dockerfile
      target: dev
    init: true
    volumes:
      - type: bind
        source: ./userservice
        target: /app
      - type: bind
        source: ./userservice/logs
        target: /app/userservice-logs
    ports:
      - "8083:8083"
    restart: unless-stopped
    networks:
      - backend
  rulesetservice:
    env_file:
      - .env
    image: rulesetservice:dev
    container_name: rulesetservice_dev
    build:
      context: ./rulesetservice
      dockerfile: Dockerfile
      target: dev
    init: true
    volumes:
      - type: bind
        source: ./rulesetservice
        target: /app
      - type: bind
        source: ./rulesetservice/logs
        target: /app/rulesetservice-logs
    ports:
      - "8082:8082"
    restart: unless-stopped
    networks:
      - backend
  securityservice:
    env_file:
      - .env
    image: securityservice:dev
    container_name: securityservice_dev
    build:
      context: ./securityservice
      dockerfile: Dockerfile
      target: dev
    init: true
    volumes:
      - type: bind
        source: ./securityservice
        target: /app
      - type: bind
        source: ./securityservice/logs
        target: /app/securityservice-logs
    ports:
      - "8084:8084"
    restart: unless-stopped
    networks:
      - backend
  elasticsearch:
    image: elastic/elasticsearch:9.0.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - backend
  kibana:
    image: elastic/kibana:9.0.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend
  filebeat:
    image: filebeatservice:dev
    container_name: filebeatservice_dev
    build:
      context: ./filebeat
      dockerfile: Dockerfile
      target: dev
    user: root
    depends_on:
      - elasticsearch
    volumes:
      - ./businessservice/logs:/app/businessservice-logs:ro
      - ./rulesetservice/logs:/app/rulesetservice-logs:ro
      - ./auditprocessservice/logs:/app/auditprocessservice-logs:ro
      - ./userservice/logs:/app/userservice-logs:ro
      - ./securityservice/logs:/app/securityservice-logs:ro
    networks:
      - backend
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - backend
networks:
  backend:
  frontend:
volumes:
  elasticsearch-data:
  
